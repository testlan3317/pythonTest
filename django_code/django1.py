# django-admin --version : to check the version
# command - django
# python manage.py migrate - apply migrations for app(s): admin, auth, contenttypes, sessions.
# python manage.py runserver - run django server

# what is an App?
# An app is a web application that has specific meaning in your project, like a home page, a contact form, or a members database.

# start an app

# python manage.py startapp members

# views.py - This is where we gather the information we need to send back a proper response. 

#Django views are Python functions that takes http request and returns http response, like HTML documents.

# views are usually put in a file called "views.py" located on your app's folder. 


# urls.py:
create a file named urls.py in the same folders as the views.py file.

# Note: there is a urls.py file under the project folder as well (which stays with the settings.py and wsgi.py), include the member urls in this file and don't forget to add the include module. 

# create a templates folder inside the "members" folder(which is the app we added previously) and create a HTML file.

=================================
Change Settings
To be able to work with more complicated stuff than 'hello world', we have to tell django that a new app is created.

This is done by changing the settings.py file in the project folder.
Look up the INSTALLED_APPS[] list and add the members app like below:

    INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'members'
    ]

    Then go back to the previous folder to run: python manage.py migrate

==================================
Django Models:
Django model is a table in your database.
In Django, data is created in objects, called Models, and is actually tables in a database.

To create a model, navigate to the models.py file in the /members/ folder.
Open it, and add a Member table by creating a Member class, and describe the table fields in it.

SQLite Database:
By default, Django will come with an empty SQLite database anmed db.sqlite3. all models created
in the Django project will be created as tables in this database.

Migrate:
After we add model description in the models.py file, we must run a command to actually create the 
table in the database. 
run: python manage.py makemigrations members

Django creates a file describing the changes and stores the file named 0001_initial.py in the members/migrations/ folder.

# Generated by Django 4.1.2 on 2022-10-27 11:14

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=255)),
                ('lastname', models.CharField(max_length=255)),
            ],
        ),
    ]


Note that Django inserts an id field for your tables, which is an auto increment number (first record gets the value 1, the second record 2 etc.), this is the default behavior of Django, you can override it by describing your own id field.

The table is not created yet, you will have to run one more command, then Django will create and execute an SQL statement, based on the content of the new file in the /migrations/ folder.

Run the migrate command to create it: python manage.py migrate
==================================
View SQL:
As a side-note: you can view the SQL statement that were executed from the migration above. 

run: python manage.py sqlmigrate members 0001

=================================
Django Insert Data(Use python shell)
Add Records
run: python manage.py shell

>>> from members.models import Member
>>> Member.objects.all()    # look at the empty Member table
Then you should see this
<QuerySet []>   # A QuerySet is a collection of data from a database. 
# Add a record
>>> member = Member(firstname="Emil", lastname="Ref")
>>> member.save()
# Execute this command to see if the Member table got a member:
>>> Member.objects.all().values()
# Hopefully, the result look like this:
<QuerySet [{'id':1, 'firstname': 'Emil', 'lastname': 'Ref'}]>

Syntax:
    member1 = Member(firstname='xx',lastname='yy') # new an instance then save
    member1.save()

Add multiple records
>>> member1 = Member(firstname='Tobias', lastname='Refsnes')
>>> member2 = Member(firstname='Linus', lastname='Refsnes')
>>> member3 = Member(firstname='Lene', lastname='Refsnes')
>>> member4 = Member(firstname='Stale', lastname='Refsnes')
>>> member5 = Member(firstname='Jane', lastname='Doe')
>>> members_list = [member1, member2, member3, member4, member5]
>>> for x in members_list:
>>>   x.save()

============================================================
update records
To update records already in the database, we need to get the record and use the python way to change it
>>> from members.models import Member
>>> x = Member.objects.all()[3]
>>> x.firstname='testuser'
>>> x.save()

Syntax:
    Member.objects.all()
    className.objects.all()

============================================================
Delete records
same python way, but use delete() at the very end
>>> from members.models import Member
>>> x = Member.objects.all()[5]
>>> x.firstname
>>> x.delete()

syntax:
    object.delete()

============================================================
Django Update Model
change Model is to change the models.py inside your members folder

class Member(models.Model):
    firstname=models.CharField(max_length=255)
    lastname=models.CharField(max_length=255)
    phone=models.IntegerField(null=True)
    joined_date=models.DateField(null=True)

then run: python manage.py makemigrations members    # members table level
then run: python manage.py migrate                  # project level

then you could go to the shell again to add the record(missing fields)
run: python manage.py shell
>>> from members.models import Member
>>> x = Member.ojbects.all()[0]
>>> x.phone = 55234234
>>> x.joined_date = '2022-01-11'
>>> x.save()

==========================================================
Display Data: Template
creating an HTML file named all_members.html in members/templates/all_members.html


Django block Tag inside the <title> element, and the <body> are placeholders.

If you got to a page not exist:
If you got the second result, then DEBUG is set to True in your settings, and you must set it to False to get directed to the 404 template.

=========================================================

Customize the 404 Template

Django will look for a file named 404.html in the templates folder, and display it when there is a 404 error.

If no such file exists, Django shows the "Not Found" that you saw in the example above.

========================================================
Test View

When testing different aspects of Django, it can be a good idea to have somewhere to test code without destroying the main project.

This is optional off course, but if you like to follow all steps in this tutorial, you should add a test view that is exactly like the one we create below.

add testing inside the views.py under members folder
=======================================================
Django Admin
1. create user
to be able to log into the admin application, we need to create a user
python manage.py createsuperuser

2. you should be telling Django which models that should be visible in the admin interface.

Include Member in the Admin Interface
This is done by a file called "admin.py", and is located in your app's folder, which is members folder

To register it
from django.contrib import admin
from .models import Member

# Register your models here.
admin.site.register(Member)
'''
===============================================================
Django Syntax
variables
1. could be defined in the views.py through context
    - can pass value like string
    - can pass object (which could be from Model)

2. could be defined in the template.html
{% with firstname="Jim" %}
{% endwith %}

=================================
Django Tags

# == operator, which is used to check if a variable is equal to a value, but there are many other operators you can use, or you can even drop the operator if you just want to check if a variable is not empty

{% if greeting ==1 and today != 0 or day == "Friday" %}
    <h1>Hello</h1>
{% elif greeting == 2 %}
    <h1>welcome</h1>
{% else %}
    <h1>Bye</h1>
{% endif %}


{% if 'Banana' in fruits %} # or could be "not in"
  <h1>Hello</h1>
{% else %}
  <h1>Goodbye</h1>
{% endif %}


% if x is y %}  # is: check if two objects are the same. == only checks the values of two objects, but is checks the identity of the objects.

  <h1>YES</h1>
{% else %}
  <h1>NO</h1>
{% endif %}

<ul>
    {% for x in mymembers %}
        <li> {{ x. firstname }} </li>
    {% endfor %}
</ul>

===================================
for
{% for x in members reversed %}  # reversed: when you want to do the loop in reversed order.
  <h1>{{ x.id }}</h1>
  <p>
    {{ x.firstname }}
    {{ x.lastname }}
  </p>
{% endfor %}

<ul>
  {% for x in emptytestobject %}
    <li>{{ x.firstname }}</li>
  {% empty %} # empty: if you want to do something if the object is empty
    <li>No members</li>
  {% endfor %}
</ul>

=======================================
Loop Variables

Django has some variables that are available for you inside a loop:

    forloop.counter
    forloop.counter0
    forloop.first
    forloop.last
    forloop.parentloop
    forloop.revcounter
    forloop.revcounter0
=======================================
<ul>
  {% for x in fruits %}
    <li>{{ forloop.counter }}</li>  # the current iteration, starting at 1
  {% endfor %}
</ul>

<ul>
  {% for x in fruits %}
    <li>{{ forloop.counter0 }}</li> # the current iteration, starting at 0
  {% endfor %}
</ul>

<ul>
  {% for x in fruits %}
    <li
      {% if forloop.first %} # draw a blue background for the first iteration of the loop
        style='background-color:lightblue;'
      {% endif %}
    >{{ x }}</li>
  {% endfor %}
</ul>
===========================================
comments
"""
{# smaller comments #} for comments out code

comments block:
{% comment "This was the original welcome message" %} # message inside the quote is the description

<h1>welcome blah blah</h1>

{% endcomment %}


comments in views.py , just use #

"""

============================================
include tag

<h1>Hello</h1>

<p>This page contains a footer in a template.</p>

{% include 'footer.html' %}  # include tag

==================
variables in the include tag

# this is mymenu.html code
<div>HOME | {{ me }} | ABOUT | FORUM | {{ sponsor }}</div>

<!DOCTYPE html>
<html>
<body>

{% include "mymenu.html" with me="TOBIAS" sponsor="W3SCHOOLS" %} # me, sponsor are variables

<h1>Welcome</h1>

<p>This is my webpage</p>

</body>
</html>
===============================================================
QuerySet
QuerySet is a collection of data from a database. is built up as a list of objects.

Member.objects.all().values() # values() return each object as a Python dictionary

Member.objects.value_list('firstname') # return only the columns that you specify

Member.objects.filter(firstname='Emil').values() # return specific rows.

The filter() method is used to filter your search, and allows you to return only the rows that matches the search term. 

mydata = Member.objects.filter(firstname='Emil').values()

# and
mydata = Member.objects.filter(lastname='Refsnes', id=2).values()

# or
mydata = Member.objects.filter(firstname='Emil').values() | Member.objects.filter(firstname='Tobias').values()

==================
Field Lookups
Django has its own way of specifying SQL statements and WHERE clauses - "Field Lookups"

"""
use __startswith keyword:

.filter(firstname__startswith='L');

is the same as the SQL statement:
where firstname like 'L%'
"""
Field Lookups Syntax

All Field lookup keywords must be specified with the fieldname, followed by two(!) underscore characters, and the keyword.

In our Member model, the statement would be written like this: 

mydata = Member.objects.filter(firstname__startswith='L').values()

================================
# order by
mydata = Member.objects.all().order_by('firstname').values()

#Descending Order

By default, the result is sorted ascending (the lowest value first), to change the direction to descending (the highest value first), use the minus sign (NOT), - in front of the field name:

mydata = Member.objects.all().order_by('-firstname').values()


Multiple Order Bys

To order by more than one field, separate the fieldnames with a comma in the order_by() method:

mydata = Member.objects.all().order_by('lastname', '-id').values()

===================================
Django - Add Static File
When building web applications, you probably want to add some static files like images or css files.

Start by creating a folder named static in your project, the same place where you created the templates folder:

The name of the folder has to be static.

{% load static %}  # load the static
<!DOCTYPE html>
<html>
<link rel="stylesheet" href="{% static 'myfirst.css' %}">  # reference the static css file
<body>

{% for x in fruits %}
  <h1>{{ x }}</h1>
{% endfor %}

</body>
</html>

Note:
Django does not have a built-in solution for serving static files, at least not in production when DEBUG has to be False.

We have to use a third-party solution to accomplish this.

In this Tutorial we will use WhiteNoise, which is a Python library, built for serving static files.

==================================================
Handle Static Files

Static files in your project, like stylesheets, JavaScripts, and images, are not handled automatically by Django when DEBUG = False.

When DEBUG = True, this worked fine, all we had to do was to put them in the static folder of the application.

When DEBUG = False, static files have to be collected and put in a specified folder before we can use it.


